function invertColor(hexColor) {
    // Remove the hash if it exists
    hexColor = hexColor.replace("#", "");

    // Parse the hex color to RGB
    let r = parseInt(hexColor.substring(0, 2), 16) / 255;
    let g = parseInt(hexColor.substring(2, 4), 16) / 255;
    let b = parseInt(hexColor.substring(4, 6), 16) / 255;

    // Convert RGB to HSL
    const [h, s, l] = rgbToHsl(r, g, b);

    // Invert the lightness
    const invertedL = 1 - l;

    // Convert back to RGB
    const [invertedR, invertedG, invertedB] = hslToRgb(h, s, invertedL);

    // Convert back to hex
    const invertedHex = rgbToHex(invertedR * 255, invertedG * 255, invertedB * 255);
    return invertedHex;
}

function rgbToHsl(r, g, b) {
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);

    let h, s, l = (max + min) / 2;

    if (max ==min) {
        h = s = 0; // achromatic
    } else {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);

        switch (max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }

        h /= 6;
    }

    return [h, s, l];
}

function hslToRgb(h, s, l) {
    let r, g, b;

    if (s ==0) {
        r = g = b = l; // achromatic
    } else {
        const hue2rgb = (p, q, t) => {
            if (t < 0) t += 1;
            if (t > 1) t -= 1;
            if (t < 1 / 6) return p + (q - p) * 6 * t;
            if (t < 1 / 2) return q;
            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
            return p;
        };

        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;

        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
    }

    return [r, g, b];
}

function rgbToHex(r, g, b) {
    const toHex = (value) => Math.round(value).toString(16).padStart(2, "0");
    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
}

function applyDarkModeStyles() {
    const elements = document.querySelectorAll("*");

    elements.forEach((element) => {
        const bgColor = getComputedStyle(element).backgroundColor;
        const textColor = getComputedStyle(element).color;
        const borderColor = getComputedStyle(element).borderColor;

        element.style.backgroundColor = invertColor(bgColor);
        element.style.color = invertColor(textColor);
        element.style.borderColor = invertColor(borderColor);
    });
}

function toggleDarkMode() {
    const body = document.body;
    body.classList.toggle("dark-mode");

    if (body.classList.contains("dark-mode")) {
        applyDarkModeStyles();
    } else {
        // Reset to default styles
        const elements = document.querySelectorAll("*");
        elements.forEach((element) => {
            element.style.backgroundColor = "";
            element.style.color = "";
            element.style.borderColor = "";
        });
    }
}
